<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects | Priya Mishra</title>
    <link>https://priya2698.github.io/project/</link>
      <atom:link href="https://priya2698.github.io/project/index.xml" rel="self" type="application/rss+xml" />
    <description>Projects</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 01 Jun 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://priya2698.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Projects</title>
      <link>https://priya2698.github.io/project/</link>
    </image>
    
    <item>
      <title>Energy Disaggregation using optimization problem</title>
      <link>https://priya2698.github.io/project/energy-disaggregation-using-optimization-problem/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://priya2698.github.io/project/energy-disaggregation-using-optimization-problem/</guid>
      <description>&lt;p&gt;In this work, our aim was to develop an energy disaggregation algorithm for the Qarnot Computing platform. The Qarnot Computing platform uses computer-heaters and utilizes the waste heat from IT computations in their buidings an offices. Through energy disaggregation, our aim was to better understand the energy requirements at different locations of the building and hence, forecast energy needs. Using this information, we can achieve a more efficient job scheduling, for example, scheduling more jobs where there is greater energy requirement. We developed an integer linear programming approach using the information provided by Qarnot Computing about different devices used in their offices and buildings.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Improving Scheduling using Job Runtime Predictions</title>
      <link>https://priya2698.github.io/project/improving-scheduling-using-job-runtime-predictions/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      <guid>https://priya2698.github.io/project/improving-scheduling-using-job-runtime-predictions/</guid>
      <description>&lt;p&gt;In this work, we were interested in studying the impact of job runtime estimates on the performances of non-clairoyant scheduling algorithms. More specifically, we consider the problem of scheduling a set of independent jobs whose processing times are unknown. User runtimes are known to be highly inaccurate. Scheduling policies such as backfilling or shortest job first rely on these estimates to schedule jobs. In this work, we explore the use of machine learning methods to provide better estimates for the exceution times using user history and job characteristics. Instead of estimating the exact value of the job runtime, we consider that the jobs fall in two categories &amp;ndash; short and long jobs and predict the type of each job. We used several classification models as well as simpler schemes such as predicting based on the class of previously submitted jobs alone. We evaluated our models using several full workload traces.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Optimizing Resource Allocation on Fat-Tree Networks</title>
      <link>https://priya2698.github.io/project/optimizing-resource-allocation-on-fat-tree-networks/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://priya2698.github.io/project/optimizing-resource-allocation-on-fat-tree-networks/</guid>
      <description>&lt;p&gt;Jobs submitted to clusters or supercomputers vary in resource requirements and execution times. Increasingly, they also vary in other characteristics such as communication and I/O behavior. Most of the current job-schedulers do not consider the communication characteristics of a job which leads to sub-optimal allocations. In this work, we developed a [greedy node-allocation algorithm]&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; for tree-based network topology. The algorithm uses the information about already running communication-intensive jobs in the cluster. An incoming communication-intensive job is allocated resources on the leaf switches which have maximum free nodes available and minimum communication-intensive jobs already running. This is done to minimize fragmentation and contention. We implemented our algorithms in SLURM, a widely used resource management systems. We obtained a maximum improvement of 78% in the exceution times over the default SLURM algorithm.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This work is a part of the paper &amp;ldquo;Communication-aware Job Scheduling using SLURM &amp;ldquo;. Please refer to the paper for additional details. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>
